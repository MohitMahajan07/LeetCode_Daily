class DSU {
    private:
        vector<int> parent;
        vector<int> rank;
        int components;

    public : 
        
        DSU(int n) {
            parent.resize(n+1);
            rank.resize(n+1);
            components = n;
            for(int i = 1; i<=n; i++) {
                parent[i] = i;
            }
        }
    
        int find (int x) {
            if (x == parent[x]) 
                return x;

            return parent[x] = find(parent[x]);
        }

        void Union (int x, int y) {
            int x_parent = find(x);
            int y_parent = find(y);

            if (x_parent == y_parent) 
                return;

            if(rank[x_parent] > rank[y_parent]) {
                parent[y_parent] = x_parent;
            } else if(rank[x_parent] < rank[y_parent]) {
                parent[x_parent] = y_parent;
            } else {
                parent[x_parent] = y_parent;
                rank[y_parent]++;
            }
            components--;
        }
    
        bool isSingle() {
            return components == 1;
        }
};

class Solution {
public:
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) 
    {
        DSU alice(n);
        DSU bob(n);
        int addedEdge = 0;
        
        // Sorting
        auto lambda = [](vector <int> & v1, vector <int> & v2)
        {
            return v1[0] > v2[0];
        };
        sort(begin(edges), end(edges), lambda);

        for(auto ed : edges)
        {
            int type = ed[0], u = ed[1], v = ed[2];

            // checking for type 3 edge
            if(type == 3)
            {
                bool add = false;

                // alice
                if(alice.find(u) != alice.find(v))
                {
                    alice.Union(u, v);
                    add = true;
                }
                // bob
                if(bob.find(u) != bob.find(v))
                {
                    bob.Union(u, v);
                    add = true;
                }

                if(add) addedEdge++;
            }

            // checking for type 2 edge
            else if (type == 2)
            {
                if(bob.find(u) != bob.find(v))
                {
                    bob.Union(u, v);
                    addedEdge++;
                }
            }

            // checking for type 1 edge
            else
            {
                if(alice.find(u) != alice.find(v))
                {
                    alice.Union(u, v);
                    addedEdge++;
                }
            }
        }
        if(alice.isSingle() && bob.isSingle())
        {
            return edges.size() - addedEdge;
        }
        return -1;
    }
};