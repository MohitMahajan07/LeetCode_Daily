/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector <TreeNode*> inorder_list;

    void inorder_traversal(TreeNode* root)
    {
        if(root == NULL) return;
        inorder_traversal(root -> left);
        inorder_list.push_back(root);
        inorder_traversal(root -> right);
    }

    TreeNode* balance(int start, int end)
    {
        if(start > end) return NULL;
        int mid = (start + end) / 2;
        TreeNode* root = inorder_list[mid];
        root -> left = balance(start, mid-1);
        root -> right = balance(mid+1, end);
        return root;
    }

    TreeNode* balanceBST(TreeNode* root) 
    {
        inorder_traversal(root);
        return balance(0, inorder_list.size()-1);
    }
};