class Solution {
public:

    int totalBooks, newShelfWidth;

    int findMinHeight(int bookIndex, vector<vector<int>> books, int curShelfWidth, int curShelfHeight, vector<vector<int>>& dp)
    {
        int maxHeight = max(curShelfHeight, books[bookIndex][1]);

        // Base Case
        if(bookIndex == totalBooks - 1)
        {
            // Place Book in same level
            if(books[bookIndex][0] <= curShelfWidth) return maxHeight;
            // Place Book in new level
            return curShelfHeight + books[bookIndex][1];
        }

        // if Already Solved
        if(dp[bookIndex][curShelfWidth] != 0) return dp[bookIndex][curShelfWidth];

        // Case: 1
        int sameShelf = INT_MAX;
        if(books[bookIndex][0] <= curShelfWidth) 
        {
            sameShelf = findMinHeight(bookIndex+1, books, curShelfWidth-books[bookIndex][0], maxHeight, dp);
        }

        // Case: 2
        int newShelf = curShelfHeight + findMinHeight(bookIndex+1, books, newShelfWidth-books[bookIndex][0], books[bookIndex][1], dp);

        return dp[bookIndex][curShelfWidth] = min(sameShelf, newShelf);
    }

    int minHeightShelves(vector<vector<int>>& books, int shelfWidth) 
    {
        totalBooks = books.size();
        newShelfWidth = shelfWidth;
        vector<int> a(newShelfWidth+1, 0);
        vector <vector<int>> dp(totalBooks, a);
        return findMinHeight(0, books, shelfWidth, 0, dp);

    }
};